# Generated by Django 4.1 on 2022-09-24 00:14

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dept',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='班组名称', max_length=64, verbose_name='班组名称')),
                ('sort', models.IntegerField(default=1, help_text='显示排序', verbose_name='显示排序')),
                ('owner', models.CharField(blank=True, help_text='负责人', max_length=32, null=True, verbose_name='负责人')),
                ('phone', models.CharField(blank=True, help_text='联系电话', max_length=32, null=True, verbose_name='联系电话')),
                ('email', models.EmailField(blank=True, help_text='邮箱', max_length=32, null=True, verbose_name='邮箱')),
                ('status', models.BooleanField(blank=True, default=True, help_text='班组状态', null=True, verbose_name='班组状态')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, default=None, help_text='上级班组', null=True, on_delete=django.db.models.deletion.CASCADE, to='users.dept', verbose_name='上级班组')),
            ],
            options={
                'verbose_name': '班组表',
                'verbose_name_plural': '班组表',
                'db_table': 'system_dept',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='岗位名称', max_length=64, verbose_name='岗位名称')),
                ('code', models.CharField(help_text='岗位编号', max_length=32, verbose_name='岗位编号')),
                ('sort', models.IntegerField(default=1, help_text='岗位顺序', verbose_name='岗位顺序')),
                ('status', models.IntegerField(choices=[(0, '离职'), (1, '在职')], default=1, help_text='岗位状态', verbose_name='岗位状态')),
            ],
            options={
                'verbose_name': '岗位表',
                'verbose_name_plural': '岗位表',
                'db_table': 'system_post',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Railway_sections',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='站段名称', max_length=64, verbose_name='站段名称')),
                ('sort', models.IntegerField(default=1, help_text='显示排序', verbose_name='显示排序')),
                ('owner', models.CharField(blank=True, help_text='负责人', max_length=32, null=True, verbose_name='负责人')),
                ('phone', models.CharField(blank=True, help_text='联系电话', max_length=32, null=True, verbose_name='联系电话')),
                ('email', models.EmailField(blank=True, help_text='邮箱', max_length=32, null=True, verbose_name='邮箱')),
                ('status', models.BooleanField(blank=True, default=True, help_text='站段状态', null=True, verbose_name='站段状态')),
            ],
            options={
                'verbose_name': '站段表',
                'verbose_name_plural': '站段表',
                'db_table': 'system_railway_sections',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='角色名称', max_length=64, verbose_name='角色名称')),
                ('key', models.CharField(help_text='权限字符', max_length=64, unique=True, verbose_name='权限字符')),
                ('sort', models.IntegerField(default=1, help_text='角色顺序', verbose_name='角色顺序')),
                ('status', models.BooleanField(default=True, help_text='角色状态', verbose_name='角色状态')),
                ('admin', models.BooleanField(default=False, help_text='是否为admin', verbose_name='是否为admin')),
                ('data_range', models.IntegerField(choices=[(0, '仅本人数据权限'), (1, '本部门及以下数据权限'), (2, '本部门数据权限'), (3, '全部数据权限'), (4, '自定数据权限')], default=0, help_text='数据权限范围', verbose_name='数据权限范围')),
                ('remark', models.TextField(blank=True, help_text='备注', null=True, verbose_name='备注')),
                ('dept', models.ManyToManyField(db_constraint=False, help_text='数据权限-关联班组', to='users.dept', verbose_name='数据权限-关联班组')),
            ],
            options={
                'verbose_name': '角色表',
                'verbose_name_plural': '角色表',
                'db_table': 'system_role',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='VerifyCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='验证码', max_length=20, verbose_name='验证码')),
                ('mobile', models.CharField(help_text='电话', max_length=11, verbose_name='电话')),
                ('add_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '短信验证码',
                'verbose_name_plural': '短信验证码',
                'db_table': 'table_verifycode',
            },
        ),
        migrations.CreateModel(
            name='Workshop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='车间名称', max_length=64, verbose_name='车间名称')),
                ('sort', models.IntegerField(default=1, help_text='显示排序', verbose_name='显示排序')),
                ('owner', models.CharField(blank=True, help_text='负责人', max_length=32, null=True, verbose_name='负责人')),
                ('phone', models.CharField(blank=True, help_text='联系电话', max_length=32, null=True, verbose_name='联系电话')),
                ('email', models.EmailField(blank=True, help_text='邮箱', max_length=32, null=True, verbose_name='邮箱')),
                ('status', models.BooleanField(blank=True, default=True, help_text='车间状态', null=True, verbose_name='车间状态')),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, default=None, help_text='上级车间', null=True, on_delete=django.db.models.deletion.CASCADE, to='users.workshop', verbose_name='上级车间')),
            ],
            options={
                'verbose_name': '车间表',
                'verbose_name_plural': '车间表',
                'db_table': 'system_workshop',
                'ordering': ('sort',),
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='姓名', max_length=30, null=True, verbose_name='姓名')),
                ('job_id', models.CharField(blank=True, help_text='工号', max_length=30, null=True, verbose_name='工号')),
                ('birthday', models.DateField(blank=True, help_text='出生年月', null=True, verbose_name='出生年月')),
                ('mobile', models.CharField(help_text='电话', max_length=11, verbose_name='电话')),
                ('gender', models.CharField(choices=[('male', '男'), ('female', '女')], default='male', help_text='性别', max_length=6, verbose_name='性别')),
                ('dept', models.ForeignKey(blank=True, db_constraint=False, help_text='关联班组', null=True, on_delete=django.db.models.deletion.PROTECT, to='users.dept', verbose_name='所属班组')),
                ('post', models.ManyToManyField(db_constraint=False, help_text='关联岗位', to='users.post', verbose_name='关联岗位')),
                ('railway_sections', models.ForeignKey(blank=True, db_constraint=False, help_text='关联站段', null=True, on_delete=django.db.models.deletion.PROTECT, to='users.railway_sections', verbose_name='所属站段')),
                ('role', models.ManyToManyField(db_constraint=False, help_text='关联角色', to='users.role', verbose_name='关联角色')),
                ('workshop', models.ForeignKey(blank=True, db_constraint=False, help_text='关联车间', null=True, on_delete=django.db.models.deletion.PROTECT, to='users.workshop', verbose_name='所属车间')),
            ],
            options={
                'verbose_name': '用户表',
                'verbose_name_plural': '用户表',
                'db_table': 'system_users',
            },
        ),
        migrations.AddField(
            model_name='railway_sections',
            name='parent',
            field=models.ForeignKey(blank=True, db_constraint=False, default=None, help_text='上级站段', null=True, on_delete=django.db.models.deletion.CASCADE, to='users.workshop', verbose_name='上级站段'),
        ),
        migrations.CreateModel(
            name='NewUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('roles', models.IntegerField(choices=[[0, 'admin'], [1, 'user']], default=1, verbose_name='角色')),
                ('last_login', models.DateTimeField(auto_now=True, null=True, verbose_name='last login')),
                ('code', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='uuid')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
